hist(means,main = "FUCK")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(dnorm)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(dnorm)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
libary(datasets)
library(datasets)
data(ToothGrowth)
source('~/.active-rstudio-document', echo=TRUE)
data(ToothGrowth)
ToothGrowth
View(ToothGrowth)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
levels(ToothGrowth$supp)
source('~/.active-rstudio-document', echo=TRUE)
View(ToothGrowth)
qplot(len, data = ToothGrowth, fill = supp)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
table(summary(ToothGrowth))
table(summary(ToothGrowth$len))
summary(ToothGrowth$len)
help(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
help(split)
source('~/.active-rstudio-document', echo=TRUE)
ToothGrowth[[1]]$supp
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(fit)
??fit
help(lm)
source('~/.active-rstudio-document', echo=TRUE)
summary(vc.fit)
summary(vc.fit)
oj.fit$coefficnets
oj.fit$coefficients
summary(oj.fit$coefficients)
oj.fit
summary(oj.fit)
table(summary(oj.fit))
summary(oj.fit)
summary(vc.fit)
vc.fit$coefficients
vc.fit$residuals
vc.fit$df.residual
coef(vc.fit)
coef(summary(vc.fit))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(ToothGrowth)
g <- ggpairs(mtcars, params = list(size = .5))
source('~/.active-rstudio-document', echo=TRUE)
g <- ggpairs(mtcars, params = list(size = .5))
g
g <- ggpairs(mtcars, params = list(size = 1))
pairs(mtcars)
m <- .15
x <- .1015
g <- 9.81
k = m*g/x
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151,146,130)
x - y
y - x
t.test(y-x)
help(t.test)
9/sqrt(9)
qt(0.0025,.975)
help(qt)
qt(c(.0025),.975)
qt(c(.0025,.975))
qt(c(.0025,.975),8)
qt(c(.025,.975),8)
9/sqrt(9)
3*2.3+1100
30/sqrt(9)
10*2.3+1100
help(power.t.test)
power.t.test(n = 9, df = 23, sd = 30, alternative = "two.sided")
power.t.test(n = 9, delta = 23, sd = 30, alternative = "two.sided")
p = .75
var = p*(1-p)
sd = sqrt(var)
std.error = sd/sqrt(4)
pt(.5,4)
pt(.95,4)
pt(.75,4)
qt(.75,4)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(3, size = 4, prob = 0.5, lower.tail = TRUE)
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = TRUE)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
ppois(9,lamda = .01*1787)
ppois(9,lambda = .01*1787)
ppois(9,lambda = .01*1787, lower.tail = FALSE)
.01*1787
lambda = 1/100
lambda*1797
lambda*1787
ppois(10,lambda*1787)
help(t.test)
help(pt)
pt(5,df = 10)
pt(6,df = 10)
pt(7,df = 10)
pt(1,df = 10)
help(t.test)
n1 <- 9
n2 <- 9
mu1 <- -3
mu2 <- 1
sd1 <- 1.5
sd2 <- 1.8
sp <- sqrt(8 * 1.5^2 + 8 * 1.8^2)/(9+9-2))
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2)/(9+9-2))
sp
sp*(1/8 + 1/8)^.5
mu1-mu2
-4/.828
pt(4.83,9)
pt(4.83,18)
mu1 - mu2 * c(-1,1) * qt(.975,18) * sp * (1/8 + 1/8)^2
4/1.6
1.6/sqrt(18)
mu1 - mu2 * c(-1,1) * qt(.99,18) * sp * (1/8 + 1/8)^2
mu1 - mu2 + c(-1,1) * qt(.99,18) * sp * (1/8 + 1/8)^2
mu1-mu2
mu2-mu1
mu1 - mu2 + c(-1,1) * qt(.975,18) * sp * (1/8 + 1/8)^2
mu1 - mu2 + c(-1,1) * qt(.99,18) * sp * (1/8 + 1/8)^2
power.t.test(n = 100, delta = .01, sd = .04)
help(power.t.test)
power.t.test(n = 100, delta = .01, sd = .04,alternative = "one.sided")
power.t.test(power = .9, delta = .01, sd = .04,alternative = "one.sided")
power.t.test(power = .9, delta = .01, sd = .04,alternative = "one.sided",type="one.sample")
power.t.test(n = 100, delta = .01, sd = .04,alternative = "one.sided",type = "one.sample")
install.packages("MASS")
library(MASS)
data(shuttle)
?shuttle
head(shuttle)
shuttle$use <- (shuttle$use=="auto")*1
head(shuttle)
data(shuttle)
summary(shuttle)
shuttle$use <- (shuttle$use=="auto")*1
summary(shuttle)
sum(shuttle$use)
shuttle$wine <- (shuttle$wind=="head")*1
shuttle$wind <- (shuttle$wind=="head")*1
sum(shuttle$use)
summary(shuttle)
fit <- glm(formula = shuttle$auto ~ shuttle$wind, family = "bimonial")
fit <- glm(formula = shuttle$auto ~ shuttle$wind, family = "binomial")
fit <- glm(formula = shuttle$use ~ shuttle$wind, family = "binomial")
summary(fit)
plot(shuttle$wind,fit$fitted)
exp(.2813-.03181)
exp(.28313-.03181)
exp(.28313-.03181)/(1+exp(.28313-.03181))
coef(fit)
coef(fit)[1]
sum(coef(fit))
exp(sum(coef(fit)))
p <- exp(sum(coef(fit)))/(1+exp(sum(coef(fit))))
p
p/(1-p)
shuttlehead <- shuttle[shuttle$wind==1,]
shuttletail <- shuttle[shuttle$wind==0,]
sum(shuttlehead$use)
sum(shuttletail$use)
72/128
73/128
.5625/.5703125
72/73
data(shuttle)
shuttle$use <- (shuttle$use=="auto")*1
shuttle$wind <- (shuttle$wind == "head)*1
fit <- glm(formula = shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
shuttle$wind <- (shuttle$wind == "head)*1
shuttle$wind <- (shuttle$wind == "head")*1
summary(shuttle)
fit <- glm(formula = shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
summary(fit)
fit <- glm(formula = shuttle$use ~ shuttle$wind, family = "binomial")
summary(fit)
sum(coef(fit))
a <- sum(coef(fit))
exp(a)/(1+exp(a))
72/128
exp(a)
o = exp(a)
o/(1+o)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot) * (x-knot))
splineTerms
knots <- c(-2,2)
splineTerms <- sapply(knots, function(knot) (x>knot) * (x-knot))
splineTerms
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot) * (x-knot))
xMat <- cbind(1,x,splineTerms)
fit <- lm(y ~xMat -1)
summary(fit)
plot(x,y)
coef(fit)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit <- lm(y ~ x + splineTerms)
summary(fit)
c1 = c(2, 2, -6, -6)
c2 = c(-4, -4, 2)
var(c1)
var(c2)
mean(c1)
mse(c1)
4^2
16*4
mean(c2)
mean(c1)
mean(c2)
-4-4+2
-6/3
2^2+2^2+4^2
64+24
c1 = [2, 2, 2]
c1 = c(2, 2, 2)
c2 = c(-6, -6, -4, -4)
mean(c2)
install.packages("shiny")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='phuse2', token='6310A7030D1FFB04974345781310817D', secret='GMss+NYNAf5GXztNcBCF6HkpZLRe4QJlv8tUVzzF')
library(shinyapps)
shinyapps::setAccountInfo(name='phuse2', token='6310A7030D1FFB04974345781310817D', secret='GMss+NYNAf5GXztNcBCF6HkpZLRe4QJlv8tUVzzF')
library(manipulate)
install(manipulate)
library.install(manipulate)
install.packages("manipulate")
library(manipulate)
data(mtcars)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myplot, s = slider(0,2,step = 0.1))
manipulate(myPlot, s = slider(0,2,step = 0.1))
manipulate(myplot(s), s = slider(0,2,step = 0.1))
manipulate(myPlot(s), s = slider(0,2,step = 0.1))
install_github('ramnathv/rCharts')
devtools::install_github('ramnathv/rCharts')
data(airquality)
library(rCharts)
dTable(airquality,sPaginationType = "full_numbers")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
install.packages("caret")
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
str(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer, class = 10)
hist(training$Superplasticizer, nclass = 10)
hist(training$Superplasticizer)
hist(training$Superplasticizer, breaks = 5)
hist(training$Superplasticizer, breaks = 10)
hist(training$Superplasticizer, breaks = 100)
hist(training$Superplasticizer, breaks = 1000)
str(train)
str(training)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
str(training)
vars <- colnames(training)
vars[1]
vars[1][1:2]
substring(vars[1],1,2)
index <- sapply(vars, function(s) substring(s, 1, 2) == "IL")
index
trainIL <- training[,index]
View(trainIL)
pr.comp <- prcomp(trainIL)
pr.comp$x[1]
pr.comp$x[2]
pr.comp$x[3]
pr.comp$x[,1]
pr.comp$sdev
pr.comp$sdev/sum(pr.comp$sdev)
.22+.18+.176
cumsum(pr.comp$sdev/sum(pr.comp$sdev))
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
index <- sapply(vars, function(s) substring(s, 1, 2) == "IL")
vars <- colnames(training)
index <- sapply(vars, function(s) substring(s, 1, 2) == "IL")
trainIL <- training[,index]
source('~/.active-rstudio-document', echo=TRUE)
features <- colnames(training)
index <- sapply(features, function(s) substring(s,1,2) == "IL")
index
preProc <- preProcess(training[,index], method = "pca")
preProc <- preProcess(training[,index], method = "pca",thresh=.8)
pcs <- predict(preProc, trainin[,index])
pcs <- predict(preProc, training[,index])
testpcs <- predict(preProc, testing[,index])
train.pcs <- predict(preProc, training[,index])
diagnosis
features[:-1]
features[length(features)]
str(training)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
nrow(training$diagnosis)
length(training$diagnosis)
trainig <- data.frame(training$daignosis, train.feat)
trainig <- data.frame(training$diagnosis, train.feat)
training.pcs <- data.frame(training$diagnosis, train.pcs)
testing <- data.frame(testing$diagnosis, test.feat)
testing.pcs <- data.frame(testing$diagnosis, test.pcs)
testing.pcs <- data.frame(testing$diagnosis, test.pcs)
testing.diagnosis
testing$diagnosis
View(testing)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
model.no.pc <- train(diagnosis ~ ., method = "glm", data = training.feats)
model.pc <- train(diagnosis ~ ., method = "glm", data = training.pcs)
colnames(training.feats)
model.no.pc <- train(training.diagnosis ~ ., method = "glm", data = training.feats)
model.pc <- train(training.diagnosis ~ ., method = "glm", data = training.pcs)
install.packages("e1071")
model.no.pc <- train(training.diagnosis ~ ., method = "glm", data = training.feats)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
install.packages("e1071", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Quiz2.R', echo=TRUE)
preds.no.pc <- predict(model.no.pc, testing.feats)
preds.pc <- predict(model.pc, testing.pcs)
confusionMatrix(testing$diagnosis, preds.no.pc)
confusionMatrix(testing$diagnosis, preds.pc)
library(shiny)
getwd()
setwd("Coursera/Data_Products/Course_Project/"
)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
(100 == (100 - 50) || (100 == (100+50)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
r <- rnorm(1000)
r <- matrix(rnorm,10,100)
r <- matrix(r,10,100)
plot(r)
range(r)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
a <- 2
rm()
rm(a)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
View(segmentationOriginal)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(model$finalModel)
install.packages("pgmm")
rm(list = ls())
ls()
a <- 2
ls()
b <- 3
ls()
rm(list = ls())
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
View(olive)
olive <- olive[,-1]
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
View(olive)
install.packages("ElemStatLearn")
rm(list = ls())
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
View(trainSA)
View(SAheart)
colnames(trainSA)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
predict(model, testSA)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
rm(list=ls())
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
view(vowel.train)
View(vowel.test)
View(vowel.train)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
varImp(model)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
install.packages("randomForest")
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
varImpPlot(model)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
plot(model)
model$finalModel
fancyRpartPlot(model$finalModel)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
source('C:/Users/Peter/Dropbox/R/Coursera/Machine_Learning/Quiz3.R', echo=TRUE)
model$finalModel
